{
  "version": 3,
  "sources": ["../src/index.ts", "../src/theme/build.ts", "../src/colors/expand.ts", "../src/colors/Colors.ts", "../src/modular-scale/createScales.ts", "../src/utils/calcModifier.ts", "../src/modular-scale/ratios.ts", "../src/theme/watch.ts"],
  "sourcesContent": ["#!/usr/bin/env node\nimport yargs from 'yargs'\nimport build from '~/theme/build'\nimport watch from '~/theme/watch'\n\nconst { argv } = yargs(process.argv.slice(2))\n  .usage('Usage: -i <input file> -o <output dir>')\n  .option('input', {\n    alias: 'i',\n    describe: 'Input file path',\n    type: 'string',\n    demandOption: true,\n  })\n  .option('theme', {\n    alias: 't',\n    describe: 'The path used to save the generated theme file',\n    type: 'string',\n    demandOption: true,\n    default: './theme.json',\n  })\n  .option('css', {\n    alias: 'c',\n    describe: 'The path used to save the generated css properties file',\n    type: 'string',\n    demandOption: true,\n    default: './_variables.css',\n  })\n  .option('watch', {\n    alias: 'w',\n    describe: 'Run build in watch mode',\n    type: 'boolean',\n    default: false,\n  })\n\ntry {\n  const options = await argv\n  const cmd = options.watch ? watch : build\n\n  await cmd(options.input, {\n    css: options.css,\n    theme: options.theme,\n  })\n} catch (err) {\n  console.error(err)\n}\n", "import fs from 'node:fs/promises'\nimport path from 'node:path'\nimport Ajv from 'ajv'\nimport chalk from 'chalk'\nimport chokidar from 'chokidar'\nimport debug from 'debug'\nimport mapObject, { mapObjectSkip } from 'map-obj'\nimport { toCustomPropertiesString } from 'object-to-css-variables'\nimport { ColorRole, expandToRadixColor } from '~/colors'\nimport { createScales } from '~/modular-scale'\nimport calcModifier from '~/utils/calcModifier'\nimport { InputTheme } from './Theme'\nimport schema from './schema.json' assert { type: 'json' }\n\nconst log = debug('theme.build')\n\nconst ajv = new Ajv()\nconst marks = {\n  pass: '\u2714\uFE0F ',\n  fail: '\u274C',\n}\n\nconst readFile = async <T>(path: string) => {\n  try {\n    const file = await fs.readFile(path, {\n      encoding: 'utf-8',\n    })\n\n    return JSON.parse(file) as T\n  } catch {\n    throw new Error(`Unable to find \"${path}\". Are you sure it exists?`)\n  }\n}\n\nconst parseValue = (\n  value: InputTheme[keyof InputTheme],\n  convertToPx = true\n): string | Record<string, string | number> | undefined => {\n  if (typeof value === 'string') {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return `${value}${convertToPx ? 'px' : ''}`\n  }\n\n  if (value != null && 'value' in value && 'unit' in value) {\n    return `${value.value}${value.unit}`\n  }\n\n  /**\n   * It's super annoying that Array.isArray doesn't properly\n   * narrow types in TS, forcing me to explicity type the value\n   */\n  if (Array.isArray(value)) {\n    return (value as (string | number)[]).reduce((acc, curr, i) => {\n      const modifier = calcModifier(i)\n      acc[modifier] = convertToPx ? `${curr}px` : curr\n\n      return acc\n    }, {} as Record<string, string | number>)\n  }\n}\n\nconst convertThemeToCSSProperties = (\n  theme: Record<string, string | number | Record<string, string>>\n) => {\n  return `:root {\\n ${toCustomPropertiesString(theme).replaceAll(';', ';\\n')}}`\n}\n\nexport type BuildOptions = {\n  theme: string\n  css: string\n}\n\n/**\n * From a \"summary\" theme.json file, generate another, fully\n * expanded theme.json implementing modular scale and Radix color schemes.\n */\nexport default async function build(input: string, opts: BuildOptions) {\n  const themeFilePath = path.resolve(opts.theme)\n  const cssPropertiesFilePath = path.resolve(opts.css)\n\n  log(`Parsed build options: %O`, {\n    themeFilePath,\n    cssPropertiesFilePath,\n  })\n\n  const data = await readFile<InputTheme>(input)\n  const valid = ajv.validate(schema, data)\n\n  if (!valid) {\n    console.log(marks.fail, chalk.red('Failed JSON schema validation'))\n\n    return console.error(ajv.errors)\n  }\n\n  console.log(marks.pass, chalk.green(`Passed JSON schema validation`))\n\n  const { colors, scale, name, ...theme } = data\n\n  const result = mapObject(theme, (key, value) => {\n    if (value == null) {\n      return mapObjectSkip\n    }\n\n    const parsedValue = parseValue(value)\n\n    if (parsedValue == null) {\n      return mapObjectSkip\n    }\n\n    return [key, parsedValue]\n  })\n\n  const scales = createScales(scale)\n  const expandedColors = Object.entries(colors).map(([key, value]) => {\n    return [key, expandToRadixColor(value)] as [\n      ColorRole,\n      Record<string, string>\n    ]\n  })\n\n  const outputTheme = {\n    ...theme,\n    ...result,\n    scale: scales,\n    colors: expandedColors.reduce((acc, curr) => {\n      acc[curr[0]] = curr[1]\n\n      return acc\n    }, {} as Record<string, string | Record<string, string>>),\n  } as Record<string, string | number | Record<string, string>>\n\n  if (scale?.field) {\n    outputTheme[scale.field] = scales\n  } else if (scale?.fields) {\n    for (const field of scale.fields) {\n      outputTheme[field] = scales\n    }\n  }\n\n  await fs.writeFile(themeFilePath, JSON.stringify(outputTheme, null, 2))\n\n  console.log(\n    marks.pass,\n    chalk.green(`Theme saved: ${chalk.dim(themeFilePath)}`)\n  )\n\n  await fs.writeFile(\n    cssPropertiesFilePath,\n    convertThemeToCSSProperties(outputTheme)\n  )\n\n  console.log(\n    marks.pass,\n    chalk.green(`CSS Properties saved: ${chalk.dim(cssPropertiesFilePath)}`)\n  )\n\n  console.log(marks.pass, chalk.green(`Done!`))\n}\n", "import * as RadixColors from '@radix-ui/colors'\nimport { ColorScheme, colorSteps } from './Colors'\n\nexport default function expand(colorScheme: string) {\n  const result: Record<string, string> = {}\n  const steps = RadixColors[colorScheme as ColorScheme]\n\n  if (steps == null) {\n    throw new Error(\n      `\"${colorScheme}\" isn't available from @radix-ui/colors. Check spelling.`\n    )\n  }\n\n  const colors = Object.values(RadixColors[colorScheme as ColorScheme])\n\n  for (let i = 0; i < colors.length; i += 1) {\n    result[colorSteps[i]] = colors[i]\n  }\n\n  return result\n}\n", "import * as RadixColors from '@radix-ui/colors'\n\nexport type ColorScheme = keyof typeof RadixColors\nexport type ColorRole =\n  | 'primary'\n  | 'accent'\n  | 'success'\n  | 'warning'\n  | 'error'\n  | 'info'\n\nexport const colorSteps = [\n  'base',\n  'bgSubtle',\n  'bg',\n  'bgHover',\n  'bgActive',\n  'line',\n  'border',\n  'borderHover',\n  'solid',\n  'solidHover',\n  'text',\n  'textContrast',\n] as const\n\nexport type ColorStep = typeof colorSteps[number]\n\ntype Colors = Record<ColorRole, Record<ColorStep, string>>\n\nexport default Colors\n", "import debug from 'debug'\nimport calcModifier from '~/utils/calcModifier'\nimport ratios from './ratios'\n\nconst log = debug('modular-scale.create')\n\nexport type ModularScaleOptions = {\n  base?: string | number | string[] | number[]\n  unit?: string\n  ratio?: string | number\n  points?: string | number\n  pointStart?: string | number\n}\n\nconst defaultOptions = {\n  base: 16,\n  ratio: ratios.perfectFifth,\n  points: 10,\n  pointStart: -3,\n}\n\nconst toCamelCase = (str: string) => {\n  return str.replace(/-([a-z])/gi, function (_, group) {\n    return group.toUpperCase()\n  })\n}\n\nconst parseRatio = (ratio?: string | number) => {\n  const raw = ratio ?? defaultOptions.ratio\n\n  if (typeof raw === 'string' && raw.includes('-')) {\n    log(`Found hyphen-cased ratio \"${raw}\"`)\n    const camelCased = toCamelCase(raw) as keyof typeof ratios\n\n    log(`Camel cased: \"${camelCased}\"`)\n\n    return ratios[camelCased]\n  }\n\n  return typeof raw === 'string' ? ratios[raw as keyof typeof ratios] : raw\n}\n\nconst parseOpts = (opts?: ModularScaleOptions) => {\n  const base = opts?.base ?? defaultOptions.base\n  const ratio = parseRatio(opts?.ratio)\n\n  if (ratio == null) {\n    throw new Error(`Unknown ratio \"${opts?.ratio}\"`)\n  }\n\n  const points = Number(opts?.points ?? defaultOptions.points)\n  const pointStart = Number(opts?.pointStart ?? defaultOptions.pointStart)\n  const pointRange = [pointStart, pointStart + points]\n\n  return {\n    base,\n    ratio,\n    pointRange,\n  }\n}\n\nconst calcScale = (point: number, opts: ReturnType<typeof parseOpts>) => {\n  const { base, ratio } = opts\n  const isBaseArr = Array.isArray(base)\n\n  // Fast calc if not multi stranded\n  if (!isBaseArr || base.length === 1) {\n    const bv = Number(isBaseArr ? base[0] : base)\n\n    return Math.pow(ratio, point) * bv\n  }\n\n  // Normalize bases\n  const nbase = [...base.map(Number)]\n  // Find the upper bounds for base values\n  const baseHigh = Math.pow(ratio, 1) * nbase[0]\n  for (let i = 1; i < base.length; i++) {\n    // shift up if value too low\n    while (nbase[i] / 1 < nbase[0] / 1) {\n      nbase[i] = Math.pow(ratio, 1) * nbase[i]\n    }\n    // Shift down if too high\n    while (nbase[i] / 1 >= baseHigh / 1) {\n      nbase[i] = Math.pow(ratio, -1) * nbase[i]\n    }\n  }\n\n  // Sort bases\n  nbase.sort()\n\n  // Figure out what base to use with modulo\n  const rBase = Math.round(\n    (point / nbase.length - Math.floor(point / nbase.length)) * nbase.length\n  )\n\n  // Return\n  return Math.pow(ratio, Math.floor(point / nbase.length)) * nbase[rBase]\n}\n\nexport default function create(scaleOptions?: ModularScaleOptions) {\n  const opts = parseOpts(scaleOptions)\n\n  log('Parsed opts %O', opts)\n\n  const values: Record<string, string> = {}\n  const unit = scaleOptions?.unit ?? 'px'\n\n  for (let i = opts.pointRange[0]; i < opts.pointRange[1]; i += 1) {\n    const scale = Number(calcScale(i, opts).toFixed(3))\n    const modifier = calcModifier(i)\n\n    log(scale, modifier)\n\n    values[modifier] = `${scale}${unit}`\n  }\n\n  return values\n}\n", "export default function calcModifier(idx: number) {\n  const numx = Math.abs(idx) - 0 - 1\n  const size = idx === 0 ? 'm' : idx > 0 ? 'l' : 's'\n\n  if (numx > 0) {\n    return `${new Array(numx)\n      .fill('x')\n      .reduce((a, c) => `${a}${c}`, '')}${size}`\n  }\n\n  return size\n}\n", "export default {\n  minorSecond: 16 / 15,\n  majorSecond: 1.125,\n  minorThird: 1.2,\n  majorThird: 1.25,\n  perfectFourth: 4 / 3,\n  augmentedFourth: 1.414,\n  perfectFifth: 1.5,\n  minorSixth: 1.6,\n  goldenSection: 1.61803398875,\n  majorSixth: 5 / 3,\n  minorSeventh: 16 / 9,\n  majorSeventh: 1.875,\n  octave: 2,\n  majorTenth: 2.5,\n  majorEleventh: 8 / 3,\n  majorTwelfth: 3,\n  doubleOctave: 4,\n} as const\n", "import chokidar from 'chokidar'\nimport debug from 'debug'\nimport build, { BuildOptions } from './build'\n\nconst log = debug('watch')\n\nlet watcher: chokidar.FSWatcher | null = null\n\nexport default async function watch(input: string, opts: BuildOptions) {\n  if (watcher) {\n    log(`Closing previous watcher...`)\n\n    await watcher.close()\n\n    watcher = null\n  }\n\n  console.log('Running builder in watch mode')\n\n  watcher = chokidar.watch(input)\n\n  const doit = async () => {\n    await build(input, opts)\n\n    console.log('Successfully rebuilt themes')\n  }\n\n  watcher.on('change', doit)\n  watcher.on('ready', doit)\n}\n"],
  "mappings": "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",
  "names": ["debug", "log", "debug", "path", "debug", "log", "debug"]
}
